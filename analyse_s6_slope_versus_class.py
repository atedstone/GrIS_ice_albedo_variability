import numpy as np

from load_uav_data import *

# Use slope raster generated by calculate_slope_angle.py

demnp = np.flipud(dems.Band1.sel(time='2017-07-21').salem.roi(shape=uav_poly).values)
demnp = np.where(demnp == 0, -9999, demnp)
demnp = np.where(np.isnan(demnp), -9999, demnp)
demrd = rd.rdarray(demnp, no_data=-9999)
demrd.geotransform = (310895.0, 0.05, 0.0, 7446839.0, 0.0, -0.05)
demrd.projection = 'PROJCS["WGS 84 / UTM zone 23N",GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563,AUTHORITY["EPSG","7030"]],AUTHORITY["EPSG","6326"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.0174532925199433,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4326"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",-45],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["EPSG","32623"]]'

slope = rd.TerrainAttribute(demrd, attrib='slope_degrees')

classes = uav_class.Band1.sel(time='2017-07-21').salem.roi(shape=uav_poly)
s_ci = np.where(classes == 3, slope, np.nan)
s_ci = np.where(s_ci >= 0, s_ci, np.nan)
s_la = np.where(classes == 4, slope, np.nan)
s_la = np.where(s_la >= 0, s_la, np.nan)
s_ha = np.where(classes == 5, slope, np.nan)
s_ha = np.where(s_ha >= 0, s_ha, np.nan)



detr = np.flipud(detrended399.detrended.sel(time='2017-07-21').salem.roi(shape=uav_poly).values)
s_ci = np.where(classes == 3, detr, np.nan)
s_ci = np.where((s_ci >= 0) & (s_ci < 0.5), s_ci, np.nan)
s_la = np.where(classes == 4, detr, np.nan)
s_la = np.where((s_la >= 0) & (s_la < 0.5), s_la, np.nan)
s_ha = np.where(classes == 5, detr, np.nan)
s_ha = np.where((s_ha >= 0) & (s_ha < 0.5), s_ha, np.nan)

detrended399.detrended.sel(time='2017-07-21').salem.roi(shape=uav_poly).groupby(classes).mean()



detrended = xr.open_dataset('/scratch/UAV/photoscan_outputs_2018/uav_20180724_PM_dem_blur399_detr.nc',
	chunks={'x':1000, 'y':1000})
classified = xr.open_dataset('/scratch/UAV/photoscan_outputs_2018/uav_20180724_PM_refl_class.nc',
	chunks={'x':1000, 'y':1000}) 
classified['x'] = detrended.x
classified['y'] = detrended.y

names = ['Water', 'Snow', 'CI', 'LA', 'HA', 'CC']

detrended399 = xr.open_dataset('/scratch/UAV/uav2017_dem/dems2017_detrended_commongrid_399_epsg32622.nc')
detrended399.detrended.attrs['pyproj_srs'] = 'epsg:32622'

detrended99 = xr.open_dataset('/scratch/UAV/uav2017_dem/dems2017_detrended_commongrid_99_epsg32622.nc')
detrended99.detrended.attrs['pyproj_srs'] = 'epsg:32622'

plt.figure()
just_class = uav_class.Band1.sel(time='2017-07-21').salem.roi(shape=uav_poly).stack(dim=('x','y')).to_dataframe()
just_elev = detrended99.detrended.sel(time='2017-07-21').salem.roi(shape=uav_poly).stack(dim=('x','y')).to_dataframe()

just_elev.index = just_class.index
combo = pd.concat((just_class,just_elev), axis=1).dropna()
combo.columns = ['Surface Type', 'Detrended Elevation (m)']
sns.boxenplot(data=combo, x='Surface Type', y='Detrended Elevation (m)', ax=ax) 
ticks, labels = plt.xticks()
plt.xticks(ticks, names)



coords = {'y':uav_class.y, 'x':uav_class.x}
slope_xr = xr.DataArray(np.flipud(slope), coords=coords, dims=('y','x'))
slope_xr.attrs['pyproj_srs'] = 'epsg:32622'
slope_xr.name = 'slope'
slope_pd = slope_xr.salem.roi(shape=uav_poly).stack(dim=('x','y')).to_dataframe()
slope_pd.index = df.index
combo_slope = pd.concat((df, slope_pd), axis=1).dropna()



example21 = detrended99.detrended.sel(time='2017-07-21').salem.roi(shape=uav_poly)
figure(),example21.plot.hist(range=(-0.2, 0.2), bins=40)
in_bounds = example21.where((example21 >= -0.05) & (example21 <= 0.05)).count()
tot_px = example21.where(example21.notnull()).count()
100 / tot_px * in_bounds

in_bounds = example21.where((example21 >= -0.01) & (example21 <= 0.01)).count()
100 / tot_px * in_bounds



